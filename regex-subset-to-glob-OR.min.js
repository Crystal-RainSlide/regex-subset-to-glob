const getSegmentedPatterns=t=>{const e=t.split(""),n=[],r=()=>n.push([]);let s=!0;const a=t=>t[t.length-1];function i(t){0===n.length&&r(),a(n).push(t),s=!1}function o(t){const e=a(n);e[e.length-1]+=t}function l(t){o(t),s=!0}let c=-1,g=0;for(;g<e.length;g++){const t=e[g];switch(t){case"|":-1===c&&r();break;case"[":if(-1!==c)throw"missing ] at "+g.toString();c=g,i("[");break;case"]":if(-1===c)throw"missing [ at "+g.toString();if(c===g-1)throw"empty bracket at "+(g-1).toString();c=-1,l("]");break;default:!0===s?i(t):o(t)}}if(-1!==c)throw"missing ] at "+g.toString()+" (the end)";return n},replaceWildcards=t=>t.startsWith("[")?t:t.replaceAll(".*","*").replaceAll(".","?");function regexSubsetToGlobOR(t){return getSegmentedPatterns(t).map(t=>t.map(replaceWildcards).join(""))}export default regexSubsetToGlobOR;